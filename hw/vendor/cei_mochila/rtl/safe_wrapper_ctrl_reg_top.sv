// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module safe_wrapper_ctrl_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 5
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output safe_wrapper_ctrl_reg_pkg::safe_wrapper_ctrl_reg2hw_t reg2hw, // Write
  input  safe_wrapper_ctrl_reg_pkg::safe_wrapper_ctrl_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import safe_wrapper_ctrl_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic safe_configuration_qs;
  logic safe_configuration_wd;
  logic safe_configuration_we;
  logic safe_mode_qs;
  logic safe_mode_wd;
  logic safe_mode_we;
  logic [2:0] master_core_qs;
  logic [2:0] master_core_wd;
  logic master_core_we;
  logic critical_section_qs;
  logic critical_section_wd;
  logic critical_section_we;
  logic external_debug_req_qs;
  logic initial_sync_master_qs;
  logic initial_sync_master_wd;
  logic initial_sync_master_we;

  // Register instances
  // R[safe_configuration]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_safe_configuration (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safe_configuration_we),
    .wd     (safe_configuration_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safe_configuration.q ),

    // to register interface (read)
    .qs     (safe_configuration_qs)
  );


  // R[safe_mode]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_safe_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safe_mode_we),
    .wd     (safe_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safe_mode.q ),

    // to register interface (read)
    .qs     (safe_mode_qs)
  );


  // R[master_core]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h1)
  ) u_master_core (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_core_we),
    .wd     (master_core_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_core.q ),

    // to register interface (read)
    .qs     (master_core_qs)
  );


  // R[critical_section]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_critical_section (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (critical_section_we),
    .wd     (critical_section_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.critical_section.q ),

    // to register interface (read)
    .qs     (critical_section_qs)
  );


  // R[external_debug_req]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_external_debug_req (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.external_debug_req.de),
    .d      (hw2reg.external_debug_req.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (external_debug_req_qs)
  );


  // R[initial_sync_master]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_initial_sync_master (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (initial_sync_master_we),
    .wd     (initial_sync_master_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.initial_sync_master.q ),

    // to register interface (read)
    .qs     (initial_sync_master_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_OFFSET);
    addr_hit[1] = (reg_addr == SAFE_WRAPPER_CTRL_SAFE_MODE_OFFSET);
    addr_hit[2] = (reg_addr == SAFE_WRAPPER_CTRL_MASTER_CORE_OFFSET);
    addr_hit[3] = (reg_addr == SAFE_WRAPPER_CTRL_CRITICAL_SECTION_OFFSET);
    addr_hit[4] = (reg_addr == SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_OFFSET);
    addr_hit[5] = (reg_addr == SAFE_WRAPPER_CTRL_INITIAL_SYNC_MASTER_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(SAFE_WRAPPER_CTRL_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(SAFE_WRAPPER_CTRL_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(SAFE_WRAPPER_CTRL_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(SAFE_WRAPPER_CTRL_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(SAFE_WRAPPER_CTRL_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(SAFE_WRAPPER_CTRL_PERMIT[5] & ~reg_be)))));
  end

  assign safe_configuration_we = addr_hit[0] & reg_we & !reg_error;
  assign safe_configuration_wd = reg_wdata[0];

  assign safe_mode_we = addr_hit[1] & reg_we & !reg_error;
  assign safe_mode_wd = reg_wdata[0];

  assign master_core_we = addr_hit[2] & reg_we & !reg_error;
  assign master_core_wd = reg_wdata[2:0];

  assign critical_section_we = addr_hit[3] & reg_we & !reg_error;
  assign critical_section_wd = reg_wdata[0];

  assign initial_sync_master_we = addr_hit[5] & reg_we & !reg_error;
  assign initial_sync_master_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = safe_configuration_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = safe_mode_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[2:0] = master_core_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = critical_section_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = external_debug_req_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = initial_sync_master_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module safe_wrapper_ctrl_reg_top_intf
#(
  parameter int AW = 5,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output safe_wrapper_ctrl_reg_pkg::safe_wrapper_ctrl_reg2hw_t reg2hw, // Write
  input  safe_wrapper_ctrl_reg_pkg::safe_wrapper_ctrl_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  safe_wrapper_ctrl_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


